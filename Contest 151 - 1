1169. Invalid Transactions
Easy

A transaction is possibly invalid if:

the amount exceeds $1000, or;
if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.
Each transaction string transactions[i] consists of comma separated values representing the name, time (in minutes), amount, and city of the transaction.

Given a list of transactions, return a list of transactions that are possibly invalid.  You may return the answer in any order.

 

Example 1:

Input: transactions = ["alice,20,800,mtv","alice,50,100,beijing"]
Output: ["alice,20,800,mtv","alice,50,100,beijing"]
Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.
Example 2:

Input: transactions = ["alice,20,800,mtv","alice,50,1200,mtv"]
Output: ["alice,50,1200,mtv"]
Example 3:

Input: transactions = ["alice,20,800,mtv","bob,50,1200,mtv"]
Output: ["bob,50,1200,mtv"]
 

Constraints:

transactions.length <= 1000
Each transactions[i] takes the form "{name},{time},{amount},{city}"
Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.
Each {time} consist of digits, and represent an integer between 0 and 1000.
Each {amount} consist of digits, and represent an integer between 0 and 2000.

class Solution {
    public List<String> invalidTransactions(String[] transactions) {
        Set<String> res = new HashSet<String>();
        Map<String, Map<Integer, String>> map = new HashMap<String, Map<Integer, String>>();
        for (String tran : transactions) {
            String[] tokens = tran.split(",");
            int amount = Integer.parseInt(tokens[2]);
            if (amount > 1000) {
                res.add(tran);
            }
            String name = tokens[0];
            int time = Integer.parseInt(tokens[1]);

            Map<Integer, String> times = map.get(name);
            if (times == null) {
                times = new HashMap<Integer, String>();
                times.put(time, tran);
                map.put(name, times);
                continue;
            }
            
            for (Integer i : times.keySet()) {
                if (Math.abs(i - time) <= 60 && !times.get(i).split(",")[3].equals(tokens[3])) {
                    res.add(times.get(i));
                    res.add(tran);
                }
            }
            times.put(time, tran);

        }
        
        return new ArrayList<String>(res);
    }
}
